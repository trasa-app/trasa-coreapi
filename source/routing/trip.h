// Copyright (C) Karim Agha - All Rights Reserved
// Unauthorized copying of this file, via any medium is strictly prohibited
// Proprietary and confidential. Authored by Karim Agha <karim@sentio.cloud>

#pragma once

#include <vector>
#include <string>
#include <chrono>
#include <utility>
#include <optional>

#include <boost/units/systems/si.hpp>

#include "waypoint.h"
#include "rpc/service.h"
#include "model/address.h"
#include "utils/datetime.h"

namespace sentio::routing
{
  /**
   * Represents a trip that needs to be optimized. 
   * 
   * This is usually the object that is received from the server. 
   * The order of waypoints in the intermediate waypoints have no significance
   * as it will be reordered anyway during trip optimization.
   */
  class unoptimized_trip
  {
  public:
    using waypoints_container = std::vector<waypoint>;
    using iterator = waypoints_container::const_iterator;

  public:
    /**
     * Constructs an unoptimized_trip object instance based off typed parameters.
     */
    unoptimized_trip(
      waypoint starting_point,
      waypoint final_point,
      waypoints_container waypoints);
    
    /**
     * Constructs an unoptimized_trip object instance based off its json representation.
     * This is the JSON deserialization method for this type.
     */
    unoptimized_trip(json_t json);

  public:
    /**
     * True if the trip returns to the starting point at the end.
     */
    bool roundtrip() const;

    /**
     * The waypoint that needs to always be first in the trip.
     * For roundtrip trips this waypoint == final_waypoints().
     */
    waypoint const& starting_waypoint() const;

    /**
     * The waypoint that needs to always be the last in the trip
     */
    waypoint const& final_waypoint() const;

  public:
    /**
     * The total number of waypoints in this trip, including the
     * starting and final waypoints.
     */
    size_t size() const;

    /**
     * Access waypoints by their index.
     * The starting point is at index 0, 
     * the final point is at the last available index.
     */
    waypoint const& operator[](size_t index) const;
  
  public:
    /**
     * Iterator to the beginning of all known waypoints.
     */
    iterator begin() const;

    /**
     * Past-the-end iterator of all known waypoints.
     */
    iterator end() const;

  public: // i/o
    json_t to_json() const;

  protected:
    waypoints_container waypoints_;
  };

  /**
   * This type represents a trip that has been optimized by OSRM based on an 
   * unoptimized trip. The order of waypoints in this case matters.
   */
  class optimized_trip : public unoptimized_trip
  {
  public:
    using legs_container = std::vector<route_leg>;
    using indecies_container = std::vector<size_t>;

  public:
    optimized_trip(
      unoptimized_trip original,
      indecies_container order,
      legs_container legs,
      polyline geometry);

  public: // computed/stored route
    /**
     * Encoded polyline that summarizes the entire trip.
     * This object is encoded using the following algorithm:
     * 
     *  https://developers.google.com/maps/documentation/utilities/polylinealgorithm
     * 
     * This object is used by clients to render a map with all
     * waypoints and the line connecting them.
     */
    polyline const& geometry() const;

    /**
     * A collection of object that describe individual
     * subjourneys between two waypoints. Each leg describe
     * the travel cost and the unique identifiers of the
     * building that leg is connecting.
     */
    std::vector<route_leg> const& legs() const;

  public: // calculations
    /**
     * The sum of all distances and duration that needs to be 
     * traveled to complete the entire trip.
     */
    travel_cost total_cost() const;

  public: // i/o
    json_t to_json() const;

  private:
    polyline geometry_;
    legs_container legs_;
  };

/**
 * Describes administrative data about a given trip, such as the 
 * account that triggered it, the id it was assigned, its creation time, etc.
 */
class trip_metadata
{
public:
  trip_metadata();
  trip_metadata(json_t const& json);

public:
  /**
   * A unique string that identifies a trip.
   * 
   * This id gets assigned in multiple ways:
   * 
   *  - for short trips that are processed synchronously, the id is a random guid
   *    generated by the server and assigned to the response. (not implemented yet)
   * 
   *  - for long trips that are processesed asynchronously, the assigned id is the
   *    string guid assigned by AWS to the SQS message that holds the trip request
   *    message.
   * 
   * This id is shared between the trip request and trip response, and
   * is used to poll for the trip status while waiting for it to be 
   * calculated.
   */
  std::optional<std::string> const& id() const;

  /**
   * This is a handle that is assigned by AWS SQS needed for
   * deleting a message off the queue.
   * 
   * This value is set by the last "read" operation from SQS.
   */
  std::optional<std::string> const& receipthandle() const;

  /**
   * The account that requested the trip.
   * 
   * Only that account will have read access to the optimized
   * trip and all its related data. This id is also used for billing
   * purposes. This ID is extracted from the JWT token used to submit
   * a routing request.
   */
  std::string const& accountid() const;

  /**
   * A unique string that identifies the region where the trip
   * is taking place.
   * 
   * This is needed to pick the right instance of the routing engine
   * that has subset of the map that contains all waypoints.
   * 
   * Slicing the map is one of the most important optimzation techniques
   * for making this system run in practical time, and thus at this point
   * cross-region trips are not supported.
   */
  std::string const& region() const;

  /**
   * A timepoint when a trip was created or generated.
   * For requests its the time of receipt of an unoptimized trip, 
   * For responses its the time of generation of an optimized trip.
   */
  date_time_t created_at() const;

public: // i/o
  json_t to_json() const;

private:
  std::string region_;
  std::string accountid_;
  date_time_t createdat_;
  std::optional<std::string> id_;
  std::optional<std::string> receipthandle_;
};


/**
 * Represents a description of a desired trip. 
 * 
 * This is an unoptimized version of the trip with waypoints
 * in the user insertion order.
 */
class trip_request
{
public:
  /**
   * Creates a trip object from a JSON representation of a trip.
   */
  trip_request(json_t b);

public:
  /**
   * A set of information that is added to a trip request by
   * the server after it is submitted from the client. 
   * 
   * Those information are added right before a trip request is
   * queued by the scheduler, and is based on things like the used
   * JWT token, the current map slicing, etc.
   */
  trip_metadata const& meta() const;

  /**
   * The location of the user at the time when the trip was
   * submitted to the server. This is used to determine which 
   * region osrm files will be used for routing.
   */
  spacial::coordinates const& location() const;

  /**
   * The underlying trip that is requested by the user.
   */
  unoptimized_trip const& trip() const;

public:
  json_t const& to_json() const;

private:
  json_t body_;
  unoptimized_trip trip_;
  trip_metadata metadata_;
  spacial::coordinates location_;
};

/**
 * This type represents a computed and optimized trip.
 * 
 * This is the final object that gets stored in the backend database
 * describing the whole process of routing a trip, including the initial 
 * set of waypoints in their input order, the resulting set of waypoints
 * in the optimized order and their legs. It also includes computed geometries
 * of the trip.
 */
class trip_response
{
public:
  /**
   * This set of values is used to measure the performance
   * of calculating routes, queues, etc. Its not available publicly
   * for end users.
   */
  struct counters 
  {
    std::chrono::milliseconds pending;
    std::chrono::milliseconds routing;
  };

public:
  trip_response(optimized_trip trip, trip_metadata metadata);

public:
  /**
   * An optimized version of the trip sent in a trip_request.
   */
  optimized_trip const& trip() const;

  /**
   * A set of information that is added to a trip response by
   * the server after it is submitted from the client. 
   * 
   * Those information are added right before a trip request is
   * queued by the scheduler, and is based on things like the used
   * JWT token, the current map slicing, etc.
   */
  trip_metadata const& meta() const;

public:
  json_t to_json() const;

private:
  trip_metadata meta_;
  optimized_trip trip_;
};

}